const video = document.getElementById('webcam');
const canvas = document.getElementById('canvas');
const ctx = canvas.getContext('2d', { alpha: true });
const startButton = document.getElementById('startButton');
const stopButton = document.getElementById('stopButton');
const calibrateButton = document.getElementById('calibrateButton');
const confirmAgeButton = document.getElementById('confirmAgeButton');
const statusDisplay = document.getElementById('statusDisplay');
const averageAgeDisplay = document.getElementById('averageAge');
const ageVerdictDisplay = document.getElementById('ageVerdict');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
const performanceConfig = {
    lowEndDevice: false,         // –§–ª–∞–≥ –Ω–∏–∑–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    detectionInterval: 100,      // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–µ—Ç–µ–∫—Ü–∏–∏ –≤ –º—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)  
    videoConstraints: {          // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–µ–æ
        width: { ideal: 640 },
        height: { ideal: 480 },
        facingMode: "user"       // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä —Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω–æ–π –∫–∞–º–µ—Ä—ã
    },
    useWasm: false,              // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å WASM –≤–º–µ—Å—Ç–æ WebGL
    skipEffects: false,          // –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    forceHighPerformance: false  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
};

// –î–æ–±–∞–≤–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ UI
function updatePerformanceModeUI() {
    // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
    let modeDisplay = document.getElementById('performanceModeDisplay');
    if (!modeDisplay) {
        modeDisplay = document.createElement('div');
        modeDisplay.id = 'performanceModeDisplay';
        modeDisplay.className = 'performance-mode-display';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const statsElement = document.querySelector('.stats');
        if (statsElement) {
            statsElement.parentNode.insertBefore(modeDisplay, statsElement.nextSibling);
        } else {
            document.body.appendChild(modeDisplay);
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ —Å—Ç–∏–ª—å
    modeDisplay.textContent = performanceConfig.lowEndDevice ? 
        'üì± –†–µ–∂–∏–º –Ω–∏–∑–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏' : 'üñ•Ô∏è –†–µ–∂–∏–º –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏';
    modeDisplay.className = performanceConfig.lowEndDevice ? 
        'performance-mode-display low-mode' : 'performance-mode-display high-mode';
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
function checkDevicePerformance() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –≤ localStorage
    try {
        const savedMode = localStorage.getItem('age-verification-performance-mode');
        if (savedMode === 'high') {
            performanceConfig.forceHighPerformance = true;
            console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
        } else if (savedMode === 'low') {
            performanceConfig.forceHighPerformance = false;
            performanceConfig.lowEndDevice = true;
            console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –Ω–∏–∑–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
            document.body.classList.add('low-end');
            applyLowEndSettings();
            return performanceConfig;
        }
    } catch (e) {
        console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞:', e);
    }
    
    // –ï—Å–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    if (performanceConfig.forceHighPerformance) {
        performanceConfig.lowEndDevice = false;
        document.body.classList.remove('low-end');
        return performanceConfig;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ WebGL
    const canvas = document.createElement('canvas');
    const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
    const hasStrongWebGL = gl && gl.getExtension('WEBGL_depth_texture');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
    const cpuCores = navigator.hardwareConcurrency || 1;
    
    // –ë–æ–ª–µ–µ –º—è–≥–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–∞–±–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    // –î–ª—è –Ω–æ—É—Ç–±—É–∫–æ–≤ —Ç—Ä–µ–±—É–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –æ–±–æ–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
    performanceConfig.lowEndDevice = !hasStrongWebGL && cpuCores <= 2;
    
    if (performanceConfig.lowEndDevice) {
        console.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –Ω–∏–∑–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é, –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏');
        applyLowEndSettings();
    } else {
        document.body.classList.remove('low-end');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', {
        forceHighPerformance: performanceConfig.forceHighPerformance,
        lowEndDevice: performanceConfig.lowEndDevice,
        useWasm: performanceConfig.useWasm,
        skipEffects: performanceConfig.skipEffects,
        detectionInterval: performanceConfig.detectionInterval,
        videoResolution: performanceConfig.videoConstraints
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –≤ UI
    updatePerformanceModeUI();
    
    return performanceConfig;
}

// –í—ã–Ω–æ—Å–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ –Ω–∏–∑–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
function applyLowEndSettings() {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å–ª–∞–±—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    performanceConfig.detectionInterval = 300;  // –†–µ–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—Ü–æ
    performanceConfig.videoConstraints = {
        width: { ideal: 320 },    // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤–∏–¥–µ–æ
        height: { ideal: 240 },
        facingMode: "user"
    };
    performanceConfig.useWasm = true; // –ò—Å–ø–æ–ª—å–∑—É–µ–º WASM –¥–ª—è —Å–ª–∞–±—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    performanceConfig.skipEffects = true; // –û—Ç–∫–ª—é—á–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å low-end –∫ body –¥–ª—è CSS –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
    document.body.classList.add('low-end');
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
function togglePerformanceMode() {
    // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∂–∏–º
    performanceConfig.lowEndDevice = !performanceConfig.lowEndDevice;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
        localStorage.setItem('age-verification-performance-mode', 
            performanceConfig.lowEndDevice ? 'low' : 'high');
    } catch (e) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∂–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', e);
    }
    
    if (performanceConfig.lowEndDevice) {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –Ω–∏–∑–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        applyLowEndSettings();
        console.log('–í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –Ω–∏–∑–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
    } else {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        performanceConfig.detectionInterval = 100;
        performanceConfig.videoConstraints = {
            width: { ideal: 640 },
            height: { ideal: 480 },
            facingMode: "user"
        };
        performanceConfig.useWasm = false;
        performanceConfig.skipEffects = false;
        document.body.classList.remove('low-end');
        console.log('–í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
    }
    
    // –ï—Å–ª–∏ –∫–∞–º–µ—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –µ—ë —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    if (stream) {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—É
        stopWebcam();
        // –ò –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–Ω–æ–≤–æ
        setTimeout(() => {
            startWebcam();
        }, 500);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –≤ UI
    updatePerformanceModeUI();
    
    return performanceConfig.lowEndDevice ? '–†–µ–∂–∏–º –Ω–∏–∑–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏' : '–†–µ–∂–∏–º –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏';
}

// –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ console.log –∏ alert
let stream;
let detectionInterval;
let shouldUpdateAges = false;
let currentBestFaceId = null;
let isAgeStableForConfirmation = false;
let statusUpdateCounter = 0;
let animationFrameId = null;
let faceDetectionData = null;

// –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
window.ageVerificationStatus = null;

const faceAgeHistory = new Map();
const AGE_HISTORY_LENGTH = 3;
let displayedAges = new Map();
const AGE_UPDATE_THRESHOLD = 1.0;
const AGE_VERIFICATION_THRESHOLD = 18;
const LOCK_TIMER_DURATION_MS = 3000; // 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏
const FACE_POSITION_TOLERANCE = 10; // –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
const AGE_DETERMINATION_TIME = 2300; // 2.3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞

const FACE_API_MODEL_URL = 'models/face_api';

// –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π
let modelsLoadedSuccessfully = false;

async function loadModels() {
    try {
        console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Face API...');
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã –∑–∞–≥—Ä—É–∑–∫–∏
        if (faceapi && faceapi.tf) {
            try {
                console.log('–ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –º–æ–¥–µ–ª–µ–π faceapi');
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–∞ –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º
                if (faceapi.tf.engine && 
                    typeof faceapi.tf.engine === 'function' &&
                    faceapi.tf.engine().dispose && 
                    typeof faceapi.tf.engine().dispose === 'function') {
                    
                    faceapi.tf.engine().dispose();
                    console.log('–ö—ç—à TensorFlow –æ—á–∏—â–µ–Ω —á–µ—Ä–µ–∑ dispose()');
                } else if (faceapi.tf.disposeVariables && 
                           typeof faceapi.tf.disposeVariables === 'function') {
                    
                    faceapi.tf.disposeVariables();
                    console.log('–ö—ç—à TensorFlow –æ—á–∏—â–µ–Ω —á–µ—Ä–µ–∑ disposeVariables()');
                } else {
                    console.log('–ú–µ—Ç–æ–¥—ã –æ—á–∏—Å—Ç–∫–∏ TensorFlow –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞');
                }
            } catch (purgeError) {
                console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞:', purgeError);
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–æ–¥–µ–ª–∏ –≤ –∫—ç—à–µ
        const modelCacheKey = 'face-api-models-cache-v2';
        // –í—Å–µ–≥–¥–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã
        let shouldLoadModels = true;
        let useCachedModels = false;
        
        // –ï—Å–ª–∏ –º–æ–¥–µ–ª–∏ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Ä–∞–Ω–µ–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫—ç—à–∞
        if (!modelsLoadedSuccessfully) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–∞–ª–∏—Å—å –ª–∏ –º–æ–¥–µ–ª–∏ —Ä–∞–Ω–µ–µ
                if (window.localStorage) {
                    const modelCache = localStorage.getItem(modelCacheKey);
                    if (modelCache) {
                        const { timestamp } = JSON.parse(modelCache);
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—Ç–∞—Ä—à–µ 1 –¥–Ω—è
                        const oneDayMs = 24 * 60 * 60 * 1000;
                        shouldLoadModels = !timestamp || (Date.now() - timestamp > oneDayMs);
                        
                        if (!shouldLoadModels) {
                            console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ Face API');
                            useCachedModels = true;
                        }
                    }
                }
            } catch (cacheError) {
                console.warn('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞ –º–æ–¥–µ–ª–µ–π:', cacheError);
                shouldLoadModels = true;
            }
        } else {
            console.log('–ú–æ–¥–µ–ª–∏ —É–∂–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        }
        
        // –í—Å–µ–≥–¥–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±–µ –º–æ–¥–µ–ª–∏ —è–≤–Ω–æ
        try {
            console.log('–ó–∞–≥—Ä—É–∑–∫–∞ ssdMobilenetv1...');
            console.log('–ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏:', FACE_API_MODEL_URL);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ fetch
            const modelWeightUrl = `${FACE_API_MODEL_URL}/ssd_mobilenetv1_model-weights_manifest.json`;
            console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É –º–æ–¥–µ–ª–∏:', modelWeightUrl);
            
            try {
                const checkResponse = await fetch(modelWeightUrl, {cache: 'no-store'});
                if (checkResponse.ok) {
                    console.log('–§–∞–π–ª –º–æ–¥–µ–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, —Å—Ç–∞—Ç—É—Å:', checkResponse.status);
                } else {
                    console.error('–§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å—Ç–∞—Ç—É—Å:', checkResponse.status);
                }
            } catch (fetchError) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É –º–æ–¥–µ–ª–∏:', fetchError);
            }
            
            await faceapi.nets.ssdMobilenetv1.loadFromUri(FACE_API_MODEL_URL);
            console.log('–ú–æ–¥–µ–ª—å ssdMobilenetv1 –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        } catch (ssdError) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ ssdMobilenetv1:', ssdError);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü');
        }
        
        try {
            console.log('–ó–∞–≥—Ä—É–∑–∫–∞ ageGenderNet...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ fetch
            const ageModelWeightUrl = `${FACE_API_MODEL_URL}/age_gender_model-weights_manifest.json`;
            console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É –º–æ–¥–µ–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞:', ageModelWeightUrl);
            
            try {
                const checkResponse = await fetch(ageModelWeightUrl, {cache: 'no-store'});
                if (checkResponse.ok) {
                    console.log('–§–∞–π–ª –º–æ–¥–µ–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞ –¥–æ—Å—Ç—É–ø–µ–Ω, —Å—Ç–∞—Ç—É—Å:', checkResponse.status);
                } else {
                    console.error('–§–∞–π–ª –º–æ–¥–µ–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å—Ç–∞—Ç—É—Å:', checkResponse.status);
                }
            } catch (fetchError) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É –º–æ–¥–µ–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞:', fetchError);
            }
            
            await faceapi.nets.ageGenderNet.loadFromUri(FACE_API_MODEL_URL);
            console.log('–ú–æ–¥–µ–ª—å ageGenderNet –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        } catch (ageError) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ ageGenderNet:', ageError);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏
        const isSsdModelLoaded = faceapi.nets.ssdMobilenetv1.isLoaded;
        const isAgeGenderModelLoaded = faceapi.nets.ageGenderNet.isLoaded;
        
        console.log('–°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π:', {
            ssdMobilenetv1: isSsdModelLoaded ? '–ó–∞–≥—Ä—É–∂–µ–Ω–∞' : '–ù–ï –∑–∞–≥—Ä—É–∂–µ–Ω–∞',
            ageGenderNet: isAgeGenderModelLoaded ? '–ó–∞–≥—Ä—É–∂–µ–Ω–∞' : '–ù–ï –∑–∞–≥—Ä—É–∂–µ–Ω–∞'
        });
        
        if (!isSsdModelLoaded) {
            throw new Error('–ú–æ–¥–µ–ª—å SsdMobilenetv1 –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        }
        
        if (!isAgeGenderModelLoaded) {
            throw new Error('–ú–æ–¥–µ–ª—å AgeGenderNet –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ –∫—ç—à –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
        try {
            if (window.localStorage) {
                localStorage.setItem(modelCacheKey, JSON.stringify({ 
                    timestamp: Date.now() 
                }));
            }
        } catch (setCacheError) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Ç–∫—É –∫—ç—à–∞ –º–æ–¥–µ–ª–µ–π:', setCacheError);
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π
        modelsLoadedSuccessfully = true;
        
        console.log('–ú–æ–¥–µ–ª–∏ Face API —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        startButton.disabled = false;
    } catch (error) {
        // –ü—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        modelsLoadedSuccessfully = false;
        
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π Face API:', error);
        statusDisplay.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π';
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: ' + error.message);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π
async function forceReloadModels() {
    try {
        statusDisplay.textContent = '–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π...';
        
        // –û—á–∏—â–∞–µ–º –∫—ç—à
        if (window.localStorage) {
            localStorage.removeItem('face-api-models-cache-v2');
        }
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –∫—ç—à –º–æ–¥–µ–ª–µ–π
        if (faceapi && faceapi.tf) {
            faceapi.tf.engine().purgeUnusedBackends();
        }
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏
        await loadModels();
        
        statusDisplay.textContent = '–ú–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã';
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–µ–π:', error);
        statusDisplay.textContent = '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π';
        return false;
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é window.onload –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π
window.onload = async () => {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    console.log('–¢–ï–°–¢ –ö–û–ù–°–û–õ–ò: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å');
    statusDisplay.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π...';
    startButton.disabled = true;

    // –î–ª—è –º–æ—â–Ω—ã—Ö –Ω–æ—É—Ç–±—É–∫–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–∏–º —Ä–µ–∂–∏–º –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (navigator.userAgent.indexOf('Mac') !== -1 || 
        navigator.userAgent.indexOf('Win') !== -1) {
        performanceConfig.forceHighPerformance = true;
        console.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ—É—Ç–±—É–∫/–¥–µ—Å–∫—Ç–æ–ø, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    checkDevicePerformance();

    if (tf) {
        console.log('TensorFlow.js –∑–∞–≥—Ä—É–∂–µ–Ω, –≤–µ—Ä—Å–∏—è:', tf.version);
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±—ç–∫–µ–Ω–¥ TensorFlow –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        if (performanceConfig.useWasm) {
            console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º WASM –±—ç–∫–µ–Ω–¥ –¥–ª—è TensorFlow');
            await tf.setBackend('wasm');
        } else {
            await tf.setBackend('webgl');
            console.log('TensorFlow –±—ç–∫–µ–Ω–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', tf.getBackend());
            
            // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WebGL
            if (performanceConfig.lowEndDevice) {
                tf.env().set('WEBGL_FORCE_F16_TEXTURES', true);
                tf.env().set('WEBGL_PACK_DEPTHWISECONV', false);
            } else {
                tf.env().set('WEBGL_CPU_FORWARD', false);
                tf.env().set('WEBGL_PACK', false);
            }
        }
    } else {
        console.error('TensorFlow.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!');
        statusDisplay.textContent = '–û—à–∏–±–∫–∞ TensorFlow.js';
        alert('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É TensorFlow.js.');
        return;
    }

    if (faceapi) {
        console.log('Face-API.js –∑–∞–≥—Ä—É–∂–µ–Ω');
    } else {
        console.error('Face-API.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!');
        statusDisplay.textContent = '–û—à–∏–±–∫–∞ Face-API.js';
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const reloadButton = document.createElement('button');
        reloadButton.textContent = '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É';
        reloadButton.className = 'reload-button';
        reloadButton.onclick = () => window.location.reload();
        document.body.appendChild(reloadButton);
        
        alert('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É Face-API.js. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
        return;
    }

    try {
        await loadModels();
        statusDisplay.textContent = '–ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ';
        console.log('–í—Å–µ –º–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        statusDisplay.textContent = '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π
        const reloadModelsButton = document.createElement('button');
        reloadModelsButton.textContent = '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª–∏';
        reloadModelsButton.className = 'reload-button';
        reloadModelsButton.onclick = async () => {
            reloadModelsButton.disabled = true;
            reloadModelsButton.textContent = '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...';
            const success = await forceReloadModels();
            
            if (success) {
                reloadModelsButton.textContent = '–ì–æ—Ç–æ–≤–æ!';
                setTimeout(() => {
                    reloadModelsButton.remove();
                }, 2000);
            } else {
                reloadModelsButton.textContent = '–û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑';
                reloadModelsButton.disabled = false;
            }
        };
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∫–Ω–æ–ø–∫–∏
        const controls = document.querySelector('.controls');
        if (controls) {
            controls.prepend(reloadModelsButton);
        } else {
            document.body.prepend(reloadModelsButton);
        }
    }

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    updatePerformanceModeUI();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä—É—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π
    const loadModelsButton = document.createElement('button');
    loadModelsButton.textContent = '–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª–∏';
    loadModelsButton.className = 'load-models-button';
    loadModelsButton.style.backgroundColor = '#3498db';
    loadModelsButton.style.color = 'white';
    loadModelsButton.style.padding = '12px 20px';
    loadModelsButton.style.margin = '10px auto';
    loadModelsButton.style.display = 'block';
    loadModelsButton.style.border = 'none';
    loadModelsButton.style.borderRadius = '5px';
    loadModelsButton.style.fontWeight = 'bold';
    loadModelsButton.style.cursor = 'pointer';
    
    loadModelsButton.onclick = async () => {
        loadModelsButton.disabled = true;
        loadModelsButton.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π...';
        statusDisplay.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π...';
        
        try {
            await loadModels();
            loadModelsButton.textContent = '–ú–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã';
            loadModelsButton.style.backgroundColor = '#27ae60';
            statusDisplay.textContent = '–ú–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –∫–∞–º–µ—Ä—É';
            startButton.disabled = false;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–µ–π:', error);
            loadModelsButton.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏';
            loadModelsButton.style.backgroundColor = '#e74c3c';
            loadModelsButton.disabled = false;
            statusDisplay.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π';
        }
    };
    
    // –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π —Å—Ç–∞—Ä—Ç–∞
    const controls = document.querySelector('.controls');
    if (controls) {
        controls.prepend(loadModelsButton);
    } else {
        document.body.prepend(loadModelsButton);
    }
};

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π
window.addEventListener('DOMContentLoaded', function() {
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
    const style = document.createElement('style');
    style.textContent = `
        .reload-button {
            background-color: #e74c3c;
            color: white;
            padding: 12px 20px;
            margin: 10px auto;
            display: block;
            border: none;
            border-radius: 5px;
            font-weight: bold;
            cursor: pointer;
        }
        
        .reload-button:hover {
            background-color: #c0392b;
        }
        
        .reload-button:disabled {
            background-color: #95a5a6;
            cursor: not-allowed;
        }
    `;
    document.head.appendChild(style);
});

async function startWebcam() {
    try {
        if (location.protocol !== 'https:' && location.hostname !== 'localhost' && location.hostname !== '127.0.0.1') {
            console.warn('–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ–±-–∫–∞–º–µ—Ä–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTTPS');
            alert('–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ–±-–∫–∞–º–µ—Ä–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTTPS –ø—Ä–æ—Ç–æ–∫–æ–ª.');
        }
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –º–æ–¥–µ–ª–∏
        if (!modelsLoadedSuccessfully || 
            !faceapi.nets.ssdMobilenetv1.isLoaded || 
            !faceapi.nets.ageGenderNet.isLoaded) {
            
            console.log('–ú–æ–¥–µ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö —Å–µ–π—á–∞—Å...');
            statusDisplay.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –∫–∞–º–µ—Ä—ã...';
            
            try {
                await loadModels();
                console.log('–ú–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            } catch (modelError) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π:', modelError);
                statusDisplay.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π';
                alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
                return;
            }
        }
        
        statusDisplay.textContent = '–ó–∞–ø—É—Å–∫ –∫–∞–º–µ—Ä—ã...';
        console.log('–ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ–±-–∫–∞–º–µ—Ä–µ...');

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        const constraints = {
            audio: false,
            video: performanceConfig.videoConstraints
        };

        stream = await navigator.mediaDevices.getUserMedia(constraints);
        console.log('–î–æ—Å—Ç—É–ø –∫ –≤–µ–±-–∫–∞–º–µ—Ä–µ –ø–æ–ª—É—á–µ–Ω');
        
        video.srcObject = stream;
        video.onloadedmetadata = () => {
            video.play();
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            startButton.disabled = true;
            stopButton.disabled = false;
            calibrateButton.disabled = false;
            confirmAgeButton.disabled = true;
            currentBestFaceId = null;
            isAgeStableForConfirmation = false;
            statusDisplay.textContent = '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä—è–º–æ –≤ –∫–∞–º–µ—Ä—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞';
            statusDisplay.className = 'instructions';
            ageVerdictDisplay.textContent = '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞..';
            ageVerdictDisplay.className = 'age-verdict waiting';
            console.log('–í–µ–±-–∫–∞–º–µ—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞, —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ:', video.videoWidth, 'x', video.videoHeight);
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ –¥–µ—Ç–µ–∫—Ü–∏—é –∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
            faceDetectionData = {
                lastDetectionTime: 0,
                faceBox: null,
                faceId: null,
                age: null,
                isStable: false
            };
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
            startRenderLoop();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –ª–∏—Ü–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ —Å —á–∞—Å—Ç–æ—Ç–æ–π, –∑–∞–≤–∏—Å—è—â–µ–π –æ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            detectionInterval = setInterval(detectAgeAndGender, performanceConfig.detectionInterval);
        };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ–±-–∫–∞–º–µ—Ä–µ:', error);
        statusDisplay.textContent = '–û—à–∏–±–∫–∞ –∫–∞–º–µ—Ä—ã';
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–µ–±-–∫–∞–º–µ—Ä–µ.');
    }
}

function stopWebcam() {
    if (stream) {
        stream.getTracks().forEach(track => track.stop());
        video.srcObject = null;
        startButton.disabled = false;
        stopButton.disabled = true;
        calibrateButton.disabled = true;
        confirmAgeButton.disabled = true;
        currentBestFaceId = null;
        isAgeStableForConfirmation = false;
        clearInterval(detectionInterval);
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        if (animationFrameId) {
            cancelAnimationFrame(animationFrameId);
            animationFrameId = null;
        }
        
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        faceDetectionData = null;
        
        statusDisplay.textContent = '–ö–∞–º–µ—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞';
        averageAgeDisplay.textContent = '-';
        ageVerdictDisplay.textContent = '';
        ageVerdictDisplay.className = 'age-verdict';
        console.log('–í–µ–±-–∫–∞–º–µ—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }
}

function calibrateAge() {
    console.log('–ü–µ—Ä–µ–∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞...');
    faceAgeHistory.clear();
    displayedAges.clear();
    shouldUpdateAges = true;
    currentBestFaceId = null;
    isAgeStableForConfirmation = false;
    confirmAgeButton.disabled = true;
    statusDisplay.textContent = '–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞! –°–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä—è–º–æ –≤ –∫–∞–º–µ—Ä—É –∏ –Ω–µ –¥–≤–∏–≥–∞–π—Ç–µ—Å—å';
    statusDisplay.className = 'scanning instructions';
    ageVerdictDisplay.textContent = '–ò–¥–µ—Ç –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞...';
    ageVerdictDisplay.className = 'age-verdict waiting';
    
    calibrateButton.textContent = "–ö–∞–ª–∏–±—Ä—É—é...";
    calibrateButton.classList.add('calibrating');
    
    setTimeout(() => {
        calibrateButton.textContent = "–ü–µ—Ä–µ–∫–∞–ª–∏–±—Ä–æ–≤–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç";
        calibrateButton.classList.remove('calibrating');
        if (shouldUpdateAges) {
            statusDisplay.textContent = '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä—è–º–æ –≤ –∫–∞–º–µ—Ä—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞';
            statusDisplay.className = 'instructions';
        }
    }, 700); // –°–æ–∫—Ä–∞—â–µ–Ω–æ –≤—Ä–µ–º—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
    if (window.stableFaceBoxes) {
        window.stableFaceBoxes.clear();
    }
}

function confirmAge() {
    // –£–±–∏—Ä–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π alert
    console.log('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞...');
    if (!isAgeStableForConfirmation || !currentBestFaceId) {
        console.warn('–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç, –∫–æ–≥–¥–∞ –æ–Ω –Ω–µ —Å—Ç–∞–±–∏–ª–µ–Ω –∏–ª–∏ –ª–∏—Ü–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
        statusDisplay.textContent = '–í–æ–∑—Ä–∞—Å—Ç –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        statusDisplay.className = 'error';
        confirmAgeButton.disabled = true;
        return;
    }

    const confirmedFaceData = faceAgeHistory.get(currentBestFaceId);
    if (!confirmedFaceData || !confirmedFaceData.finalProcessedAge) {
        console.error('–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–≥–æ –ª–∏—Ü–∞ –∏–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.');
        statusDisplay.textContent = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≤–æ–∑—Ä–∞—Å—Ç–µ.';
        statusDisplay.className = 'error';
        faceAgeHistory.clear();
        displayedAges.clear();
        currentBestFaceId = null;
        isAgeStableForConfirmation = false;
        confirmAgeButton.disabled = true;
        ageVerdictDisplay.textContent = '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞';
        ageVerdictDisplay.className = 'age-verdict waiting';
        statusDisplay.textContent = '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä—è–º–æ –≤ –∫–∞–º–µ—Ä—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞';
        statusDisplay.className = 'instructions';
        return;
    }
    
    const finalAge = confirmedFaceData.finalProcessedAge;
    averageAgeDisplay.textContent = finalAge;

    console.log(`–í–æ–∑—Ä–∞—Å—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω: ${finalAge} –¥–ª—è –ª–∏—Ü–∞ ${currentBestFaceId}`);

    try {
        if (finalAge >= AGE_VERIFICATION_THRESHOLD) {
            ageVerdictDisplay.textContent = '–ü—Ä–æ–¥–∞–∂–∞ –†–ê–ó–†–ï–®–ï–ù–ê';
            ageVerdictDisplay.className = 'age-verdict allowed';
            statusDisplay.textContent = `–í–æ–∑—Ä–∞—Å—Ç: ${finalAge} - –ü—Ä–æ–¥–∞–∂–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞`;
            statusDisplay.className = 'verified';
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            window.ageStatus = "18+";
            window.ageVerificationStatus = "18+";
            
            // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–∫—Ä—ã—Ç—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            updateAgeStatusElement("18+");
            
            console.log("–°–¢–ê–¢–£–°: 18+");
        } else {
            ageVerdictDisplay.textContent = `–ü—Ä–æ–¥–∞–∂–∞ –ó–ê–ü–†–ï–©–ï–ù–ê (–≤–æ–∑—Ä–∞—Å—Ç < ${AGE_VERIFICATION_THRESHOLD})`;
            ageVerdictDisplay.className = 'age-verdict denied';
            statusDisplay.textContent = `–í–æ–∑—Ä–∞—Å—Ç: ${finalAge} - –ü—Ä–æ–¥–∞–∂–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞`;
            statusDisplay.className = 'denied';
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            window.ageStatus = "–ú–ª–∞–¥—à–µ 18 –ª–µ—Ç";
            window.ageVerificationStatus = "–ú–ª–∞–¥—à–µ 18 –ª–µ—Ç";
            
            // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–∫—Ä—ã—Ç—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            updateAgeStatusElement("–ú–ª–∞–¥—à–µ 18 –ª–µ—Ç");
            
            console.log("–°–¢–ê–¢–£–°: –ú–ª–∞–¥—à–µ 18 –ª–µ—Ç");
        }
    } catch(e) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞:", e);
    }
    
    faceAgeHistory.clear();
    displayedAges.clear();
    currentBestFaceId = null;
    isAgeStableForConfirmation = false;
    confirmAgeButton.disabled = true;

    setTimeout(() => {
        statusDisplay.textContent = '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä—è–º–æ –≤ –∫–∞–º–µ—Ä—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞';
        statusDisplay.className = 'instructions';
        ageVerdictDisplay.textContent = '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞..';
        ageVerdictDisplay.className = 'age-verdict waiting';
        averageAgeDisplay.textContent = '-';
    }, 3000);
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
function updateAgeStatusElement(status) {
    let statusElement = document.getElementById('ageStatusData');
    
    if (!statusElement) {
        statusElement = document.createElement('div');
        statusElement.id = 'ageStatusData';
        statusElement.style.padding = '10px';
        statusElement.style.marginTop = '10px';
        statusElement.style.border = '1px solid #ccc';
        statusElement.style.borderRadius = '4px';
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
        const container = document.querySelector('.age-verification-container') || document.body;
        container.appendChild(statusElement);
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    if (status === "18+") {
        statusElement.style.backgroundColor = '#dff0d8';
        statusElement.style.color = '#3c763d';
    } else {
        statusElement.style.backgroundColor = '#f2dede';
        statusElement.style.color = '#a94442';
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    const now = new Date();
    const timestamp = now.toLocaleTimeString();
    
    statusElement.innerHTML = `
        <strong>–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞:</strong> ${status}<br>
        <small>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${timestamp}</small>
    `;
}

function smoothAge(faceId, age) {
    if (!faceAgeHistory.has(faceId)) {
        faceAgeHistory.set(faceId, {
            ages: shouldUpdateAges ? [age] : [],
            lastSeen: Date.now(),
            isStable: !shouldUpdateAges,
            finalProcessedAge: null,
            lockTimerStart: null,
            isLocked: false,
            lockedAge: null,
            lockedVerdictText: '',
            lockedVerdictClass: '',
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            updateCounter: 0
        });
        return Math.round(age);
    }

    const faceData = faceAgeHistory.get(faceId);
    faceData.lastSeen = Date.now();
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    faceData.updateCounter = (faceData.updateCounter || 0) + 1;
    
    // –î–ª—è –Ω–∏–∑–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–∂–µ
    const shouldUpdateHistory = performanceConfig.lowEndDevice ? 
        faceData.updateCounter % 3 === 0 : true;
    
    if ((shouldUpdateAges || faceData.ages.length < AGE_HISTORY_LENGTH) && shouldUpdateHistory) {
        faceData.ages.push(age);
        faceData.isStable = false;
        faceData.finalProcessedAge = null;
        faceData.lockTimerStart = null;
        faceData.isLocked = false;
        if (faceData.ages.length > AGE_HISTORY_LENGTH) {
            faceData.ages.shift();
        }
        if (faceData.ages.length >= AGE_HISTORY_LENGTH) {
            faceData.isStable = true;
            let allFacesStable = true;
            for (const data of faceAgeHistory.values()) {
                if (!data.isStable) {
                    allFacesStable = false;
                    break;
                }
            }
            if (allFacesStable) {
                shouldUpdateAges = false;
                console.log('–í–æ–∑—Ä–∞—Å—Ç —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
                statusDisplay.textContent = '–í–æ–∑—Ä–∞—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
                statusDisplay.className = 'verified';
                calibrateButton.textContent = "–ü–µ—Ä–µ–∫–∞–ª–∏–±—Ä–æ–≤–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç";
                calibrateButton.classList.remove('calibrating');
            }
        }
    } else if (!faceData.isStable && faceData.ages.length >= AGE_HISTORY_LENGTH) {
        faceData.isStable = true;
    }

    if (faceData.ages.length > 0) {
        // –î–ª—è —Å–ª–∞–±—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –≤–º–µ—Å—Ç–æ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–≥–æ
        const smoothedAge = faceData.ages.reduce((sum, val) => sum + val, 0) / faceData.ages.length;
        const finalAge = Math.round(smoothedAge);
        faceData.finalProcessedAge = finalAge;
        
        // –ù–∞ —Å–ª–∞–±—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–∂–µ
        const updateThreshold = performanceConfig.lowEndDevice ? AGE_UPDATE_THRESHOLD * 2 : AGE_UPDATE_THRESHOLD;
        
        if (!displayedAges.has(faceId) || 
            Math.abs(finalAge - displayedAges.get(faceId)) >= updateThreshold || 
            (shouldUpdateAges && faceData.isStable)) {
            displayedAges.set(faceId, finalAge);
        }
        return faceData.finalProcessedAge;
    }
    
    if (displayedAges.has(faceId)) {
        faceData.finalProcessedAge = displayedAges.get(faceId);
        return faceData.finalProcessedAge;
    }
    
    faceData.finalProcessedAge = Math.round(age);
    return faceData.finalProcessedAge;
}

function cleanupAgeHistory() {
    const now = Date.now();
    const MAX_AGE_MS = 6000;
    for (const [faceId, faceData] of faceAgeHistory.entries()) {
        if (now - faceData.lastSeen > MAX_AGE_MS) {
            faceAgeHistory.delete(faceId);
            displayedAges.delete(faceId);
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–∏, –Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è –æ—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏
function startRenderLoop() {
    // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –∫–∞–¥—Ä–∞–º–∏
    let lastRenderTime = 0;
    
    function renderFrame(timestamp) {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–µ–ª—å—Ç—É –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
        const deltaTime = timestamp - lastRenderTime;
        lastRenderTime = timestamp;
        
        if (!faceDetectionData) {
            animationFrameId = requestAnimationFrame(renderFrame);
            return;
        }
        
        // –û—á–∏—â–∞–µ–º –∫–∞–Ω–≤–∞—Å –û–î–ò–ù —Ä–∞–∑ –∑–∞ –∫–∞–¥—Ä
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ª–∏—Ü–µ –∏ –æ–Ω–æ –±—ã–ª–æ –∑–∞–º–µ—á–µ–Ω–æ –Ω–µ –±–æ–ª–µ–µ 2 —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥
        if (faceDetectionData && faceDetectionData.faceBox && 
            Date.now() - faceDetectionData.lastDetectionTime < 2000) {
            
            // –†–∏—Å—É–µ–º —Ä–∞–º–∫—É
            const box = faceDetectionData.faceBox;
            
            // –î–ª—è —Å–ª–∞–±—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –æ—Ç—Ä–∏—Å–æ–≤–∫—É
            if (performanceConfig.skipEffects) {
                ctx.lineWidth = 2;
                ctx.strokeStyle = '#0077ff';
                
                // –û–∫—Ä—É–≥–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–∏–∫—Å–µ–ª–µ–π
                const x = Math.round(box.x);
                const y = Math.round(box.y);
                const width = Math.round(box.width);
                const height = Math.round(box.height);
                
                // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–∞–º–∫–∏
                ctx.strokeRect(x, y, width, height);
            } else {
                // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Ä–µ–∑–∫–∏—Ö –¥–≤–∏–∂–µ–Ω–∏–π —Ä–∞–º–∫–∏
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Ç–æ–ª—Å—Ç—É—é –ª–∏–Ω–∏—é —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                ctx.lineWidth = 4;
                ctx.strokeStyle = 'rgba(0, 123, 255, 0.8)';
                
                // –û–∫—Ä—É–≥–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–∏–∫—Å–µ–ª–µ–π
                const x = Math.round(box.x);
                const y = Math.round(box.y);
                const width = Math.round(box.width);
                const height = Math.round(box.height);
                
                // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–∞–º–∫–∏ - –¥–µ–ª–∞–µ–º –µ—ë –±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω–æ–π
                ctx.strokeRect(x, y, width, height);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Ä–∞–º–∫—É –¥–ª—è –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–≥–æ –≤–∏–¥–∞
                ctx.lineWidth = 2;
                ctx.strokeStyle = 'rgba(255, 255, 255, 0.6)';
                ctx.strokeRect(x + 2, y + 2, width - 4, height - 4);
            }
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑—Ä–∞—Å—Ç–µ
            if (faceDetectionData.age !== null) {
                const textSize = performanceConfig.skipEffects ? 
                      14 : Math.max(14, Math.min(Math.round(box.width) / 4, 20));
                ctx.font = `${textSize}px Arial`;
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ x –∏ y, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –±—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω—ã –≤—ã—à–µ –≤ –±–ª–æ–∫–µ if/else
                const x = Math.round(box.x);
                const y = Math.round(box.y);
                const textYPosition = y - 10 > 0 ? y - 10 : y + textSize + 15;
                
                // –î–ª—è —Å–ª–∞–±—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —É–ø—Ä–æ—â–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                if (performanceConfig.skipEffects) {
                    const text = faceDetectionData.isStable ? 
                        `–í–æ–∑—Ä–∞—Å—Ç: ${faceDetectionData.age}` : '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ...';
                        
                    ctx.fillStyle = faceDetectionData.isStable ? '#00FF00' : '#FFA500';
                    ctx.fillText(text, x + 10, textYPosition);
                } else {
                    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
                    const text = faceDetectionData.isStable ? 
                        `–í–æ–∑—Ä–∞—Å—Ç: ${faceDetectionData.age}` : '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ...';
                    const textWidth = ctx.measureText(text).width;
                    
                    ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';
                    ctx.fillRect(x + 5, textYPosition - textSize, textWidth + 10, textSize + 6);
                    
                    if (faceDetectionData.isStable) {
                        ctx.fillStyle = '#00FF00';
                        ctx.fillText(`–í–æ–∑—Ä–∞—Å—Ç: ${faceDetectionData.age}`, x + 10, textYPosition);
                    } else {
                        ctx.fillStyle = '#FFA500';
                        ctx.fillText('–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ...', x + 10, textYPosition);
                    }
                }
            }
        }
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–∞–¥—Ä
        animationFrameId = requestAnimationFrame(renderFrame);
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
    animationFrameId = requestAnimationFrame(renderFrame);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ª–∏—Ü–∞ –±–µ–∑ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
async function detectAgeAndGender() {
    if (video.readyState < video.HAVE_METADATA || video.paused || video.ended) {
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π
    if (!faceapi.nets.ssdMobilenetv1.isLoaded) {
        console.error('–ú–æ–¥–µ–ª—å SsdMobilenetv1 –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!');
        statusDisplay.textContent = '–û—à–∏–±–∫–∞: –º–æ–¥–µ–ª—å –ª–∏—Ü–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞';
        
        // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å –µ—â–µ —Ä–∞–∑ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
        try {
            console.log('–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ SsdMobilenetv1...');
            await faceapi.nets.ssdMobilenetv1.loadFromUri(FACE_API_MODEL_URL);
            console.log('–ú–æ–¥–µ–ª—å SsdMobilenetv1 —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ');
            return; // –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏ SsdMobilenetv1:', e);
            clearInterval(detectionInterval);
            return;
        }
    }
    
    if (!faceapi.nets.ageGenderNet.isLoaded) {
        console.error('–ú–æ–¥–µ–ª—å AgeGenderNet –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!');
        statusDisplay.textContent = '–û—à–∏–±–∫–∞: –º–æ–¥–µ–ª—å –≤–æ–∑—Ä–∞—Å—Ç–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞';
        
        // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å –µ—â–µ —Ä–∞–∑ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
        try {
            console.log('–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ AgeGenderNet...');
            await faceapi.nets.ageGenderNet.loadFromUri(FACE_API_MODEL_URL);
            console.log('–ú–æ–¥–µ–ª—å AgeGenderNet —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ');
            return; // –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏ AgeGenderNet:', e);
            clearInterval(detectionInterval);
            return;
        }
    }

    const displaySize = { width: video.videoWidth, height: video.videoHeight };
    faceapi.matchDimensions(canvas, displaySize);

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ—Ç–µ–∫—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const detectionOptions = new faceapi.SsdMobilenetv1Options({ 
        minConfidence: performanceConfig.lowEndDevice ? 0.4 : 0.5, // –°–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è —Å–ª–∞–±—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        maxResults: 1 // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º—ã—Ö –ª–∏—Ü –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
    });

    try {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–µ–º–ø–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–ª–∞–±—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ - —É–º–µ–Ω—å—à–∞–µ–º –≤—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        let detectInput = video;
        
        if (performanceConfig.lowEndDevice) {
            // –°–æ–∑–¥–∞–µ–º canvas —Å –ø–æ–Ω–∏–∂–µ–Ω–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
            const sampleCanvas = document.createElement('canvas');
            const sampleCtx = sampleCanvas.getContext('2d');
            
            // –£–º–µ–Ω—å—à–∞–µ–º –≤ 2 —Ä–∞–∑–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            sampleCanvas.width = video.videoWidth / 2;
            sampleCanvas.height = video.videoHeight / 2;
            
            // –†–∏—Å—É–µ–º –≤–∏–¥–µ–æ –≤ —É–º–µ–Ω—å—à–µ–Ω–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ
            sampleCtx.drawImage(video, 0, 0, sampleCanvas.width, sampleCanvas.height);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–µ–Ω—å—à–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏
            detectInput = sampleCanvas;
        }
        
        const detectionsWithAgeAndGender = await faceapi.detectAllFaces(detectInput, detectionOptions)
            .withAgeAndGender();
            
        // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–º–µ–Ω—å—à–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        if (performanceConfig.lowEndDevice && detectionsWithAgeAndGender.length > 0) {
            detectionsWithAgeAndGender.forEach(detection => {
                const box = detection.detection.box;
                box.x *= 2;
                box.y *= 2;
                box.width *= 2;
                box.height *= 2;
            });
        }

        // –ï—Å–ª–∏ –Ω–µ—Ç –ª–∏—Ü - –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        if (detectionsWithAgeAndGender.length === 0) {
            // –ï—Å–ª–∏ –Ω–µ—Ç –ª–∏—Ü –≤ –∫–∞–¥—Ä–µ –±–æ–ª—å—à–µ 3 —Å–µ–∫—É–Ω–¥ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ UI
            if (!faceDetectionData || Date.now() - faceDetectionData.lastDetectionTime > 3000) {
                if (!isAgeStableForConfirmation) {
                    averageAgeDisplay.textContent = '-';
                    statusDisplay.textContent = '–õ–∏—Ü–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –∫–∞–º–µ—Ä—É.';
                    statusDisplay.className = 'error';
                    confirmAgeButton.disabled = true;
                    currentBestFaceId = null;
                }
            }
            return;
        }
        
        // –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–µ –ª–∏—Ü–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const bestDetection = getBestDetection(detectionsWithAgeAndGender);
        if (!bestDetection) return;
        
        // –ü–æ–ª—É—á–∞–µ–º ID –ª–∏—Ü–∞ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç
        const faceId = getFaceId(bestDetection);
        const processedAge = smoothAge(faceId, Math.round(bestDetection.age));
        const faceData = faceAgeHistory.get(faceId);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
        if (!faceDetectionData) {
            faceDetectionData = {
                lastDetectionTime: Date.now(),
                faceBox: bestDetection.detection.box,
                faceId: faceId,
                age: processedAge,
                isStable: faceData ? faceData.isStable : false
            };
        } else {
            // –ü–ª–∞–≤–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è —Ä–∞–º–∫–∏
            if (faceDetectionData.faceBox) {
                const currentBox = faceDetectionData.faceBox;
                const newBox = bestDetection.detection.box;
                
                // –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–≤–∏–∂–µ–Ω–∏—è –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–µ–∫—É—â–∏–º –∏ –Ω–æ–≤—ã–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ–º
                const dx = Math.abs(currentBox.x - newBox.x);
                const dy = Math.abs(currentBox.y - newBox.y);
                const distance = Math.sqrt(dx*dx + dy*dy);
                
                // –î–ª—è —Å–ª–∞–±—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–µ–ª–∞–µ–º –º–µ–Ω—å—à–µ –ø–ª–∞–≤–Ω–æ—Å—Ç–∏, –Ω–æ –±–æ–ª—å—à–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                let alpha = performanceConfig.lowEndDevice ? 0.5 : 0.3; // –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                
                // –ë—ã—Å—Ç—Ä–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –±–æ–ª—å—à–∏–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
                if (distance > 20) {
                    alpha = performanceConfig.lowEndDevice ? 0.8 : 0.5;  // –ë—ã—Å—Ç—Ä–æ–µ —Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ —Ä–µ–∑–∫–æ–º –¥–≤–∏–∂–µ–Ω–∏–∏
                } else if (distance > 5) {
                    alpha = performanceConfig.lowEndDevice ? 0.6 : 0.4;  // –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è —É–º–µ—Ä–µ–Ω–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
                } else if (performanceConfig.lowEndDevice) {
                    alpha = 0.5;  // –î–ª—è —Å–ª–∞–±—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –º–µ–Ω—å—à–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è –ø—Ä–∏ –º–∞–ª—ã—Ö –¥–≤–∏–∂–µ–Ω–∏—è—Ö
                } else {
                    alpha = 0.2;  // –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ –Ω–µ–±–æ–ª—å—à–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–º–∫–∏ —Å —É—á–µ—Ç–æ–º –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
                faceDetectionData.faceBox = {
                    x: currentBox.x * (1 - alpha) + newBox.x * alpha,
                    y: currentBox.y * (1 - alpha) + newBox.y * alpha,
                    width: currentBox.width * (1 - alpha) + newBox.width * alpha,
                    height: currentBox.height * (1 - alpha) + newBox.height * alpha
                };
            } else {
                faceDetectionData.faceBox = bestDetection.detection.box;
            }
            
            faceDetectionData.lastDetectionTime = Date.now();
            faceDetectionData.faceId = faceId;
            faceDetectionData.age = processedAge;
            faceDetectionData.isStable = faceData ? faceData.isStable : false;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞
        if (faceData && faceData.isStable) {
            currentBestFaceId = faceId;
            isAgeStableForConfirmation = true;
            confirmAgeButton.disabled = false;
            statusDisplay.textContent = '–í–æ–∑—Ä–∞—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç"';
            statusDisplay.className = 'ready-for-confirmation';
            
            averageAgeDisplay.textContent = processedAge;
        } else if (!isAgeStableForConfirmation) {
            confirmAgeButton.disabled = true;
            currentBestFaceId = null;
            averageAgeDisplay.textContent = '-';
            if (statusDisplay.className !== 'error') {
                statusDisplay.textContent = '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞...';
                statusDisplay.className = 'scanning';
            }
        }
        
        cleanupAgeHistory();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –ª–∏—Ü–∞:', error);
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫—É, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º –∫–∞–¥—Ä–µ
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ª–∏—Ü–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è
function getFaceId(detection) {
    const { x, y } = detection.detection.box;
    return `${Math.round(x / FACE_POSITION_TOLERANCE)}-${Math.round(y / FACE_POSITION_TOLERANCE)}`;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–≥–æ –ª–∏—Ü–∞ (—Å –Ω–∞–∏–±–æ–ª—å—à–µ–π –ø–ª–æ—â–∞–¥—å—é)
function getBestDetection(detections) {
    if (detections.length === 0) return null;
    
    return detections.reduce((best, current) => {
        const currentArea = current.detection.box.width * current.detection.box.height;
        const bestArea = best.detection.box.width * best.detection.box.height;
        return currentArea > bestArea ? current : best;
    }, detections[0]);
}

startButton.addEventListener('click', startWebcam);
stopButton.addEventListener('click', stopWebcam);
calibrateButton.addEventListener('click', calibrateAge);
confirmAgeButton.addEventListener('click', confirmAge);

console.log('–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫–Ω–æ–ø–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');

// –î–æ–±–∞–≤–∏–º —ç—Ç—É –∫–Ω–æ–ø–∫—É –≤ HTML —á–µ—Ä–µ–∑ JavaScript –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
window.addEventListener('DOMContentLoaded', function() {
    // –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
    const toggleButton = document.createElement('button');
    toggleButton.id = 'togglePerformanceButton';
    toggleButton.textContent = '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏';
    toggleButton.className = 'performance-button';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    const controls = document.querySelector('.controls');
    if (controls) {
        controls.appendChild(toggleButton);
    } else {
        document.body.appendChild(toggleButton);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–∫–∞
    toggleButton.addEventListener('click', function() {
        const newMode = togglePerformanceMode();
        alert('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ: ' + newMode);
    });
});

